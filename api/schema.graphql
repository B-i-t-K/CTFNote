"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Ctf`."""
  ctfs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ctf`."""
    orderBy: [CtfsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CtfCondition
  ): CtfsConnection

  """Reads and enables pagination through a set of `CtfSecret`."""
  ctfSecrets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CtfSecret`."""
    orderBy: [CtfSecretsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CtfSecretCondition
  ): CtfSecretsConnection

  """Reads and enables pagination through a set of `Invitation`."""
  invitations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvitationCondition
  ): InvitationsConnection

  """Reads and enables pagination through a set of `Profile`."""
  profiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition
  ): TasksConnection

  """Reads and enables pagination through a set of `WorkOnTask`."""
  workOnTasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorkOnTask`."""
    orderBy: [WorkOnTasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkOnTaskCondition
  ): WorkOnTasksConnection
  ctf(id: Int!): Ctf
  ctfSecret(id: Int!): CtfSecret
  invitation(ctfId: Int!, profileId: Int!): Invitation
  profile(id: Int!): Profile
  task(id: Int!): Task
  workOnTask(taskId: Int!, profileId: Int!): WorkOnTask

  """Reads and enables pagination through a set of `Ctf`."""
  incomingCtf(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CtfsConnection
  me: MeResponse

  """Reads and enables pagination through a set of `Ctf`."""
  pastCtf(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CtfsConnection

  """Reads a single `Ctf` using its globally unique `ID`."""
  ctfByNodeId(
    """The globally unique `ID` to be used in selecting a single `Ctf`."""
    nodeId: ID!
  ): Ctf

  """Reads a single `CtfSecret` using its globally unique `ID`."""
  ctfSecretByNodeId(
    """The globally unique `ID` to be used in selecting a single `CtfSecret`."""
    nodeId: ID!
  ): CtfSecret

  """Reads a single `Invitation` using its globally unique `ID`."""
  invitationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Invitation`.
    """
    nodeId: ID!
  ): Invitation

  """Reads a single `Profile` using its globally unique `ID`."""
  profileByNodeId(
    """The globally unique `ID` to be used in selecting a single `Profile`."""
    nodeId: ID!
  ): Profile

  """Reads a single `Task` using its globally unique `ID`."""
  taskByNodeId(
    """The globally unique `ID` to be used in selecting a single `Task`."""
    nodeId: ID!
  ): Task

  """Reads a single `WorkOnTask` using its globally unique `ID`."""
  workOnTaskByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `WorkOnTask`.
    """
    nodeId: ID!
  ): WorkOnTask
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Ctf` values."""
type CtfsConnection {
  """A list of `Ctf` objects."""
  nodes: [Ctf!]!

  """
  A list of edges which contains the `Ctf` and cursor to aid in pagination.
  """
  edges: [CtfsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Ctf` you could get from the connection."""
  totalCount: Int!
}

type Ctf implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  weight: Float
  ctfUrl: String
  logoUrl: String
  ctftimeUrl: String
  description: String
  startTime: Datetime
  endTime: Datetime
  secretsId: Int!

  """Reads a single `CtfSecret` that is related to this `Ctf`."""
  secrets: CtfSecret

  """Reads and enables pagination through a set of `Invitation`."""
  invitations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvitationCondition
  ): InvitationsConnection!

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition
  ): TasksConnection!
  granted: Boolean
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type CtfSecret implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  credentials: String

  """Reads and enables pagination through a set of `Ctf`."""
  ctfsBySecretsId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ctf`."""
    orderBy: [CtfsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CtfCondition
  ): CtfsConnection!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Ctf`."""
enum CtfsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  START_TIME_ASC
  START_TIME_DESC
  END_TIME_ASC
  END_TIME_DESC
  SECRETS_ID_ASC
  SECRETS_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Ctf` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CtfCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `startTime` field."""
  startTime: Datetime

  """Checks for equality with the object’s `endTime` field."""
  endTime: Datetime

  """Checks for equality with the object’s `secretsId` field."""
  secretsId: Int
}

"""A connection to a list of `Invitation` values."""
type InvitationsConnection {
  """A list of `Invitation` objects."""
  nodes: [Invitation!]!

  """
  A list of edges which contains the `Invitation` and cursor to aid in pagination.
  """
  edges: [InvitationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Invitation` you could get from the connection."""
  totalCount: Int!
}

type Invitation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ctfId: Int!
  profileId: Int!

  """Reads a single `Ctf` that is related to this `Invitation`."""
  ctf: Ctf

  """Reads a single `Profile` that is related to this `Invitation`."""
  profile: Profile
}

type Profile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String
  role: Role!

  """Reads and enables pagination through a set of `Invitation`."""
  invitations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvitationCondition
  ): InvitationsConnection!

  """Reads and enables pagination through a set of `WorkOnTask`."""
  workOnTasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorkOnTask`."""
    orderBy: [WorkOnTasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkOnTaskCondition
  ): WorkOnTasksConnection!
}

enum Role {
  USER_GUEST
  USER_MEMBER
  USER_MANAGER
  USER_ADMIN
}

"""Methods to use when ordering `Invitation`."""
enum InvitationsOrderBy {
  NATURAL
  CTF_ID_ASC
  CTF_ID_DESC
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Invitation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InvitationCondition {
  """Checks for equality with the object’s `ctfId` field."""
  ctfId: Int

  """Checks for equality with the object’s `profileId` field."""
  profileId: Int
}

"""A connection to a list of `WorkOnTask` values."""
type WorkOnTasksConnection {
  """A list of `WorkOnTask` objects."""
  nodes: [WorkOnTask!]!

  """
  A list of edges which contains the `WorkOnTask` and cursor to aid in pagination.
  """
  edges: [WorkOnTasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WorkOnTask` you could get from the connection."""
  totalCount: Int!
}

type WorkOnTask implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  taskId: Int!
  profileId: Int!

  """Reads a single `Task` that is related to this `WorkOnTask`."""
  task: Task

  """Reads a single `Profile` that is related to this `WorkOnTask`."""
  profile: Profile
}

type Task implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  description: String
  category: String
  flag: String
  padUrl: String!
  ctfId: Int!

  """Reads a single `Ctf` that is related to this `Task`."""
  ctf: Ctf

  """Reads and enables pagination through a set of `WorkOnTask`."""
  workOnTasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorkOnTask`."""
    orderBy: [WorkOnTasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkOnTaskCondition
  ): WorkOnTasksConnection!
  solved: Boolean
}

"""Methods to use when ordering `WorkOnTask`."""
enum WorkOnTasksOrderBy {
  NATURAL
  TASK_ID_ASC
  TASK_ID_DESC
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorkOnTask` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WorkOnTaskCondition {
  """Checks for equality with the object’s `taskId` field."""
  taskId: Int

  """Checks for equality with the object’s `profileId` field."""
  profileId: Int
}

"""A `WorkOnTask` edge in the connection."""
type WorkOnTasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorkOnTask` at the end of the edge."""
  node: WorkOnTask!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A `Invitation` edge in the connection."""
type InvitationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Invitation` at the end of the edge."""
  node: Invitation!
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """A list of `Task` objects."""
  nodes: [Task!]!

  """
  A list of edges which contains the `Task` and cursor to aid in pagination.
  """
  edges: [TasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Task` at the end of the edge."""
  node: Task!
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CTF_ID_ASC
  CTF_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `ctfId` field."""
  ctfId: Int
}

"""A `Ctf` edge in the connection."""
type CtfsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Ctf` at the end of the edge."""
  node: Ctf!
}

"""A connection to a list of `CtfSecret` values."""
type CtfSecretsConnection {
  """A list of `CtfSecret` objects."""
  nodes: [CtfSecret!]!

  """
  A list of edges which contains the `CtfSecret` and cursor to aid in pagination.
  """
  edges: [CtfSecretsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CtfSecret` you could get from the connection."""
  totalCount: Int!
}

"""A `CtfSecret` edge in the connection."""
type CtfSecretsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CtfSecret` at the end of the edge."""
  node: CtfSecret!
}

"""Methods to use when ordering `CtfSecret`."""
enum CtfSecretsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CtfSecret` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CtfSecretCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""A connection to a list of `Profile` values."""
type ProfilesConnection {
  """A list of `Profile` objects."""
  nodes: [Profile!]!

  """
  A list of edges which contains the `Profile` and cursor to aid in pagination.
  """
  edges: [ProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Profile` you could get from the connection."""
  totalCount: Int!
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile!
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ROLE_ASC
  ROLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProfileCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `role` field."""
  role: Role
}

type MeResponse {
  profile: Profile
  jwt: Jwt
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar Jwt

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Ctf`."""
  createCtf(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCtfInput!
  ): CreateCtfPayload

  """Creates a single `Invitation`."""
  createInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInvitationInput!
  ): CreateInvitationPayload

  """Updates a single `Ctf` using its globally unique id and a patch."""
  updateCtfByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCtfByNodeIdInput!
  ): UpdateCtfPayload

  """Updates a single `Ctf` using a unique key and a patch."""
  updateCtf(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCtfInput!
  ): UpdateCtfPayload

  """Updates a single `CtfSecret` using its globally unique id and a patch."""
  updateCtfSecretByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCtfSecretByNodeIdInput!
  ): UpdateCtfSecretPayload

  """Updates a single `CtfSecret` using a unique key and a patch."""
  updateCtfSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCtfSecretInput!
  ): UpdateCtfSecretPayload

  """Updates a single `Profile` using its globally unique id and a patch."""
  updateProfileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByNodeIdInput!
  ): UpdateProfilePayload

  """Updates a single `Profile` using a unique key and a patch."""
  updateProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileInput!
  ): UpdateProfilePayload

  """Updates a single `Task` using its globally unique id and a patch."""
  updateTaskByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskByNodeIdInput!
  ): UpdateTaskPayload

  """Updates a single `Task` using a unique key and a patch."""
  updateTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload

  """Deletes a single `Ctf` using its globally unique id."""
  deleteCtfByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCtfByNodeIdInput!
  ): DeleteCtfPayload

  """Deletes a single `Ctf` using a unique key."""
  deleteCtf(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCtfInput!
  ): DeleteCtfPayload

  """Deletes a single `Invitation` using its globally unique id."""
  deleteInvitationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvitationByNodeIdInput!
  ): DeleteInvitationPayload

  """Deletes a single `Invitation` using a unique key."""
  deleteInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInvitationInput!
  ): DeleteInvitationPayload

  """Deletes a single `Task` using its globally unique id."""
  deleteTaskByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskByNodeIdInput!
  ): DeleteTaskPayload

  """Deletes a single `Task` using a unique key."""
  deleteTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  startWorkingOn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StartWorkingOnInput!
  ): StartWorkingOnPayload
  stopWorkingOn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StopWorkingOnInput!
  ): StopWorkingOnPayload
  importCtf(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportCtfInput
  ): ImportCtfPayload
  createTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskInput
  ): CreateTaskPayload
}

"""The output of our create `Ctf` mutation."""
type CreateCtfPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ctf` that was created by this mutation."""
  ctf: Ctf

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CtfSecret` that is related to this `Ctf`."""
  secrets: CtfSecret

  """An edge for our `Ctf`. May be used by Relay 1."""
  ctfEdge(
    """The method to use when ordering `Ctf`."""
    orderBy: [CtfsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CtfsEdge
}

"""All input for the create `Ctf` mutation."""
input CreateCtfInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Ctf` to be created by this mutation."""
  ctf: CtfInput!
}

"""An input for mutations affecting `Ctf`"""
input CtfInput {
  title: String!
  weight: Float
  ctfUrl: String
  logoUrl: String
  ctftimeUrl: String
  description: String
  startTime: Datetime
  endTime: Datetime
}

"""The output of our create `Invitation` mutation."""
type CreateInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invitation` that was created by this mutation."""
  invitation: Invitation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ctf` that is related to this `Invitation`."""
  ctf: Ctf

  """Reads a single `Profile` that is related to this `Invitation`."""
  profile: Profile

  """An edge for our `Invitation`. May be used by Relay 1."""
  invitationEdge(
    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvitationsEdge
}

"""All input for the create `Invitation` mutation."""
input CreateInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Invitation` to be created by this mutation."""
  invitation: InvitationInput!
}

"""An input for mutations affecting `Invitation`"""
input InvitationInput {
  ctfId: Int!
  profileId: Int!
}

"""The output of our update `Ctf` mutation."""
type UpdateCtfPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ctf` that was updated by this mutation."""
  ctf: Ctf

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CtfSecret` that is related to this `Ctf`."""
  secrets: CtfSecret

  """An edge for our `Ctf`. May be used by Relay 1."""
  ctfEdge(
    """The method to use when ordering `Ctf`."""
    orderBy: [CtfsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CtfsEdge
}

"""All input for the `updateCtfByNodeId` mutation."""
input UpdateCtfByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ctf` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Ctf` being updated.
  """
  patch: CtfPatch!
}

"""Represents an update to a `Ctf`. Fields that are set will be updated."""
input CtfPatch {
  title: String
  weight: Float
  ctfUrl: String
  logoUrl: String
  ctftimeUrl: String
  description: String
  startTime: Datetime
  endTime: Datetime
}

"""All input for the `updateCtf` mutation."""
input UpdateCtfInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Ctf` being updated.
  """
  patch: CtfPatch!
  id: Int!
}

"""The output of our update `CtfSecret` mutation."""
type UpdateCtfSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CtfSecret` that was updated by this mutation."""
  ctfSecret: CtfSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CtfSecret`. May be used by Relay 1."""
  ctfSecretEdge(
    """The method to use when ordering `CtfSecret`."""
    orderBy: [CtfSecretsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CtfSecretsEdge
}

"""All input for the `updateCtfSecretByNodeId` mutation."""
input UpdateCtfSecretByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CtfSecret` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CtfSecret` being updated.
  """
  patch: CtfSecretPatch!
}

"""
Represents an update to a `CtfSecret`. Fields that are set will be updated.
"""
input CtfSecretPatch {
  credentials: String
}

"""All input for the `updateCtfSecret` mutation."""
input UpdateCtfSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CtfSecret` being updated.
  """
  patch: CtfSecretPatch!
  id: Int!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was updated by this mutation."""
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

"""All input for the `updateProfileByNodeId` mutation."""
input UpdateProfileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  username: String
  role: Role
}

"""All input for the `updateProfile` mutation."""
input UpdateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
  id: Int!
}

"""The output of our update `Task` mutation."""
type UpdateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was updated by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ctf` that is related to this `Task`."""
  ctf: Ctf

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the `updateTaskByNodeId` mutation."""
input UpdateTaskByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  patch: TaskPatch!
}

"""Represents an update to a `Task`. Fields that are set will be updated."""
input TaskPatch {
  title: String
  description: String
  category: String
  flag: String
}

"""All input for the `updateTask` mutation."""
input UpdateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  patch: TaskPatch!
  id: Int!
}

"""The output of our delete `Ctf` mutation."""
type DeleteCtfPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ctf` that was deleted by this mutation."""
  ctf: Ctf
  deletedCtfNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CtfSecret` that is related to this `Ctf`."""
  secrets: CtfSecret

  """An edge for our `Ctf`. May be used by Relay 1."""
  ctfEdge(
    """The method to use when ordering `Ctf`."""
    orderBy: [CtfsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CtfsEdge
}

"""All input for the `deleteCtfByNodeId` mutation."""
input DeleteCtfByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ctf` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCtf` mutation."""
input DeleteCtfInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Invitation` mutation."""
type DeleteInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invitation` that was deleted by this mutation."""
  invitation: Invitation
  deletedInvitationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ctf` that is related to this `Invitation`."""
  ctf: Ctf

  """Reads a single `Profile` that is related to this `Invitation`."""
  profile: Profile

  """An edge for our `Invitation`. May be used by Relay 1."""
  invitationEdge(
    """The method to use when ordering `Invitation`."""
    orderBy: [InvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvitationsEdge
}

"""All input for the `deleteInvitationByNodeId` mutation."""
input DeleteInvitationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Invitation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteInvitation` mutation."""
input DeleteInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ctfId: Int!
  profileId: Int!
}

"""The output of our delete `Task` mutation."""
type DeleteTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was deleted by this mutation."""
  task: Task
  deletedTaskNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ctf` that is related to this `Task`."""
  ctf: Ctf

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the `deleteTaskByNodeId` mutation."""
input DeleteTaskByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTask` mutation."""
input DeleteTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  login: String!
  password: String!
}

"""The output of our `register` mutation."""
type RegisterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `register` mutation."""
input RegisterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  login: String!
  password: String!
}

"""The output of our `startWorkingOn` mutation."""
type StartWorkingOnPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  workOnTask: WorkOnTask

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `WorkOnTask`."""
  task: Task

  """Reads a single `Profile` that is related to this `WorkOnTask`."""
  profile: Profile

  """An edge for our `WorkOnTask`. May be used by Relay 1."""
  workOnTaskEdge(
    """The method to use when ordering `WorkOnTask`."""
    orderBy: [WorkOnTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkOnTasksEdge
}

"""All input for the `startWorkingOn` mutation."""
input StartWorkingOnInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  taskId: Int
}

"""The output of our `stopWorkingOn` mutation."""
type StopWorkingOnPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  workOnTask: WorkOnTask

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `WorkOnTask`."""
  task: Task

  """Reads a single `Profile` that is related to this `WorkOnTask`."""
  profile: Profile

  """An edge for our `WorkOnTask`. May be used by Relay 1."""
  workOnTaskEdge(
    """The method to use when ordering `WorkOnTask`."""
    orderBy: [WorkOnTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkOnTasksEdge
}

"""All input for the `stopWorkingOn` mutation."""
input StopWorkingOnInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  taskId: Int
}

type ImportCtfPayload {
  ctf: Ctf
  query: Query
}

input ImportCtfInput {
  ctftimeId: Int!
}

type CreateTaskPayload {
  task: Task
  query: Query
}

input CreateTaskInput {
  ctfId: Int!
  title: String!
  category: String!
  description: String
  flag: String
}
